Питання Величка Дмитра
1.	Що таке TypeScript?  
TypeScript - це строго типізована і компілювана мова, чим, можливо, буде ближче до програмістів Java, C# та інших типових мов. Хоча на виході компілятор створює той самий JavaScript, який потім виконується браузером.
2.	Як оголошуються змінні та константи в TypeScript? 
Для визначення змінних можна використовувати ключове слово var :
	var z;  
Інший спосіб визначення змінної застосовує ключове слово let.
	let z;
3.	Які існують типи даних в TypeScript? 
У TypeScript є такі базові типи:
•	boolean : логічне значення true чи false
•	number : числове значення
•	string : рядки
•	Array : масиви
•	кортежі
•	Enum : перерахування
•	Any : довільний тип
•	Symbol
•	null і undefined : відповідають значенням null і undefined у javascript
•	Never : також представляє відсутність значення і використовується як тип функцій, що повертаються, які генерують або повертають помилку
4.	Як створюються функції? 
Визначення функції
TypeScript також визначає функцію за допомогою ключового слова function, але додає додаткові можливості по роботі з функціями. Зокрема, тепер ми можемо визначити тип параметрів, що передаються, і тип значення, що повертається.
Параметри функції
Функція може мати параметри, які вказуються після назви функції у дужках через кому.
Результат функції
Функція може повертати значення певного типу, який називається типом функції. Тип функції, що повертається, ставиться після списку параметрів через двокрапку:
5.	Що собою являють котежі, масиви, enum? 
Масиви визначаються за допомогою виразу [] та також є строго типізованими.
Альтернативний спосіб визначення масивів представляє застосування типу Array<>, де у фігурних дужках вказується тип елементів масиву.
Але фактично такі форми масивів, як number[]або string[]є скороченням відповідно до типів Array<number>абоArray<string>
Кортежі (Tuples), як і масиви, представляють набір елементів, котрим заздалегідь відомий тип. На відміну від масивів кортежі можуть зберігати значення різних типів. Для визначення кортежу застосовується синтаксис масиву:

	let user: [string, number];
Тип enum або перерахування дозволяє визначити набір саме ванних констант, які описують певні стани.
Для визначення переліку застосовується ключове слово enum 
6.	Що собою являє клас? 
TypeScript реалізує об'єктно-орієнтований підхід, у ньому є повноцінна підтримка класів. Клас представляє шаблон для створення об'єктів та інкапсулює функціональність, яку повинен мати об'єкт. Клас визначає стан та поведінку, якими володіє об'єкт.
7.	За допомогою чого виконують початкову ініціалізацію об'єкта? 
Крім звичайних методів класи мають спеціальні функції – конструктори, які визначаються за допомогою ключового слова constructor . Конструктори виконують початкову ініціалізацію об'єкта.
8.	Що таке успадкування? 
Одним із ключових моментів об'єктно-орієнтованої парадигми є успадкування. У TypeScript успадкування реалізується за допомогою ключового слова extends (як Java).
Клас Employee, який представляє працівника, є підкласом чи успадковується від класу Person. А клас Person називається батьківським чи базовим класом. При наслідуванні клас Employee переймає весь функціонал класу Person - всі його властивості та функції і може їх використовувати. І також можна визначити у підкласі нові властивості та методи, яких немає у класі Person.
9.	Для чого потрібні модифікатори доступу? 
Модифікатори доступу дозволяють приховати стан об'єкта від зовнішнього доступу та керувати доступом до цього стану. У TypeScript три модифікатори: public , protected і private.
10.	Що таке інтерфейс? Як його використовують? 
Інтерфейс визначає властивості та методи, які об'єкт має реалізувати. Іншими словами, інтерфейс – це визначення кастомного типу даних, але без реалізації. У цьому випадку інтерфейси TS схожі на інтерфейси в мовах Java і C#. Інтерфейси визначаються за допомогою ключового слова interface . 

Питання Кравця Владислава
1. Що таке веб-розробка
Веброзробка — процес створення вебсайтів або вебдодатків. Основними етапами процесу є вебдизайн, верстка сторінок, програмування для веб на стороні клієнта і сервера, а також конфігурування вебсервера.

2. Типи веб-розробок.
Можна виділити такі види веб-розробки:
frontend;
backend;
fullstack.

3. Що таке Backend.
Бекенд – це внутрішня, прихована від користувача начинка сайту або веб-програми. Іншими словами, це частина сервісу, яка працює на віддаленому сервері, а не у браузері чи персональному комп’ютері. Бекенд обробляє і постачає користувачеві дані, які потім відображає фронтенд: так називають інтерфейс користувача, видиму частину сайту або програми, яка працює на вашому пристрої.

4. Що таке Frontend
Frontend – це публічна частина web-додатків (веб-сайтів), з якою користувач може взаємодіяти і контактувати напряму. У Frontend входить відображення функціональних завдань призначеного для користувача інтерфейсу, що виконуються на стороні клієнта, а також обробка запитів користувачів. По суті, фронтенд – це все те, що бачить користувач при відкритті web-сторінки

5. Frontend і Backend розробка –   відмінності і взаємодія між собою
Backend – це програмно-апаратна частина проекту,  Frontend ж є клієнтською стороною призначеного для користувача інтерфейсу до програмно-апаратної частини проекту, тобто до бекенду. Іншими словами бекенд – це все те, що відбувається на стороні сервера і що залишається невидимим користувачеві (сам сервер теж є частиною бекенду, тільки апаратного). Звідси і назва front – це видиме спереду, back – це те, що приховано позаду, невидиме.

Бекенд-розробники мають справу з серверними мовами програмування, такими як Java, Python, PHP, Ruby та інші. Також бекендери повинні знати бази даних, архітектуру, до всього іншого їм знадобляться знання апаратної частини бекенд, тобто сервера, його можливості і характеристики. Бекенд-розробники, як правило, не мають відношення ні з чим, що безпосередньо взаємодіє з користувачем, вони не розбираються в призначених для користувача інтерфейсах UI і не заглиблюються в призначений для користувача досвід взаємодії UX, або в верстку сторінки, хоча загальне розуміння всього цього мають. Вони працюють, в основному, з точним аналізом і обчисленнями, де майже немає творчої, гуманітарної складової. При цьому, їм потрібно вміти обчислювати всі можливі наслідки операцій та розуміти причини помилок, що з’явилися на шляху клієнт-сервер-клієнт.

Процес взаємодії frontend і backend: фронтенд відправляє призначену для користувача інформацію в бекенд; інформація обробляється; інформація повертається назад, прийнявши цілісну форму і виконавши оброблений запит. Всі ці завдання виконує кілька фахівців одночасно, це завжди взаємодоповнююча командна робота. 
Варіанти взаємодії frontend і backend: HTTP-запит відправляється на сервер, сервер в процесі пошуку інформації, вбудовує її в шаблон і повертає назад у вигляді HTML-сторінки. Випадок із застосуванням інструментарію AJAX (Asynchronous JavaScript and XML). В даному випадку запит відправляє JavaScript, який завантажений в браузер, відповідь же приходить в форматі XML або JSON. Односторінкові додатки, які завантажують дані без оновлення сторінок. Це робиться за допомогою AJAX або фреймворків Angular і Ember. Ember або бібліотека React надають допомогу у використанні програми і в клієнтській частині і на сервері. Frontend і backend взаємодіють через AJAX і HTML-код, який обробляється на сервері. Робота і обов’язки frontend і backend девелоперів найчастіше розділені, але іноді виникає необхідність у програміста вирішувати проблеми як на стороні сервера, так і в клієнтської частини. Досить часто можна зустріти фахівців, які можуть поєднувати frontend і backend, вони абсолютно впевнено себе почувають як з однієї так і з іншої точки зору.

6. Хто такий Full-Stack developer?
Full-Stack developer – це розробник, який бере участь у всіх етапах розробки веб-додатків. Він розуміє все, що потрібно для створення програми, і Frontend, і Backend. Фронтенд-розробка включає в себе видиму частину проекту, з якою взаємодіють користувачі (інтерфейс користувача). Бекенд є тим місцем, де відбувається все справжнє диво. Це частина, яка включає бізнес-логіку (як функціонує система, і як дані проходять через серію завдань), як зберігаються дані і де виконується рішення. Теоретично фулл-стек розробник багато може зробити сам і в усьому розуміється. Ось такий і читець, і жнець і на дуді гравець.

7. Що таке URL адреса?
URL - це адреса, який має будь-який мережевий ресурс і який можна використовувати для роботи в Інтернеті.
URL складається з назви веб-сайту та шляхи. Шлях показує, де файл можна знайти на сервері.
Окремі компоненти для URL:
Субдомен (також домен третього рівня): може зробити інтернет-сторінки більш зрозумілими.
Домен другого рівня: часто ця назва компанії.
Домен верхнього рівня: він часто показує значення або походження інтернет-адреси.
Шлях: вказує на каталоги веб-сервера. Це означає, що він показує, де саме знаходиться сайт на сервері.
URL завжди структурований однаково. Він складається з різних компонентів, які стандартизовані в усьому світі.

8. Що таке інтернет?
Інтернет - всесвітня система взаємосполучених комп'ютерних мереж, побудована на використанні протоколу IP і маршрутизації пакетів даних. І. утворює глобальний інформаційний простір, слугує фізичною основою для Всесвітньої павутини (World Wide Web, WWW) і великої кількості інших систем передачі даних.

9. Що таке w3c?
Консорціум Всесвітнього павутиння (англ. World Wide Web Consortium, W3C) — головна міжнародна організація, що розробляє й впроваджує технологічні стандарти для Всесвітнього павутиння. Заснована 1994 року Тімом Бернерсом-Лі, — винахідником Всесвітнього павутиння, що він його очолює. 
Прикладами стандартів консорціуму є HTML, XML, CSS, SVG, RSS та WCAG. Хоча юридично W3C не є міжнародно визнаною організацією стандартизації, однак її стандарти є загальновизнаними і, що характерно, — вільними від будь-яких платних запатентованих технологій.

10. Що таке веб-браузер?
веб-браузер - програмне забезпечення для комп'ютера або іншого електронного пристрою, як правило, під'єднаного до Інтернету, що дає можливість користувачеві взаємодіяти з текстом, малюнками або іншою інформацією на гіпертекстовій вебсторінці. Тексти та малюнки можуть містити посилання на інші вебсторінки, розташовані на тому ж вебсайті або на інших вебсайтах. Вебпереглядач з допомогою гіперпосилань дозволяє користувачеві швидко та просто отримувати інформацію, розміщену на багатьох вебсторінках.

Питання Веретільника Віталія
1.	Що таке NFT?
NFT «невзаємозамінний токен», тобто неповторний і існує в єдиному екземплярі, його не можна розділити, а вся інформація про його автора, покупця і всі операції з ним надійно зберігається в блокчейні.
2.	Як протоколи Web 3.0 забезпечує децентралізацію?
Вони використовують різні токени(крипту), як винагороду, для заохочення учасників стати частиною мережі, зробити свій цифровий внесок у стабільність мережі.
3.	Що таке Web 3.0?
Web 3.0 - це концепція використання Інтернету масовим користувачем у найближчому майбутньому з огляду на активний розвиток та впровадження технологій, заснованих на блокчейні.
4.	Що таке Web 2.0?
Web 2.0 - друге покоління інтернету, яке почало поширення на початку 2000-х. Основу Web 2.0 становлять інтерактивні платформи та сервіси, підключені до Всесвітньої мережі. На відміну від першого покоління, сайти стали веб-додатками, які можуть самостійно використовувати користувачі. Пізніше до цього додалися соціальні мережі та система хмарних сервісів. 
5.	Що таке Web 1.0?
Web 1.0 — це перша версія «Всесвітньої мережі» (World Wide Web), яка почала набувати популярності на початку 90-х після впровадження протоколу комунікації та HTTP. Сайти цієї версії являли собою статичні сторінки з текстом, посиланнями та зображеннями. За словами Тіма Бернерса-Лі, якого називають автором Мережі, сайти Web 1.0 були доступні лише для читання. Взаємодія з сайтами обмежувалася найпростішими формами комунікації, такими як форуми.
6.	Що таке метасвіт у Web 3.0?
Метавсесвіт - це іммерсивний тривимірний простір з доповненою, віртуальною та змішаною реальністю, що дозволяє користувачам взаємодіяти з 3D-об'єктами.
Його мета – створити віртуальну копію реального світу з виділеними просторами для роботи, ігор та громадської діяльності. Всі ці простори взаємодіятимуть один з одним, а метавсесвіт буде розміщений на блокчейні, щоб його не контролював один суб'єкт.
 
7.	Які є характеристики Web 3.0?
•	децентралізація
•	штучний інтелект та машинне навчання
•	відкритість
•	свобода
•	всюдисутність
•	семантична павутина
8.	Що таке блокчейн?
Блокчейн – це спосіб децентралізованого зберігання інформації.Її можна подати у вигляді ланцюжка даних,розподілених по блоках зі своїми ключами.
9.	Що таке блок в блокчейні?
Блок — це запис у розподіленому реєстрі про кілька транзакцій. У ньому відбито, хто кому і коли переклав якийсь обсяг активів.
10.	Що таке конценсус в блокчейні?
Консенсус блокчейна — це процедура за допомогою якої учасники схвалюють транзакції. Нові транзакції можна реєструвати лише за згодою більшості учасників мережі.

Питання Бакалова Артема
1.  Що таке JavaScript?
JavaScript – це мова програмування, що дозволяє зробити Web -сторінку інтерактивною, тобто такою що реагує на дії користувача. Послідовність інструкцій (що називається програмою, скриптом або сценарієм) виконується інтерпретатором, вбудованим в звичайний Web -браузер. Іншими словами, код програми вбудовується в HTML - документ і виконується на боці клієнта. Для виконання програми не потрібно навідь перезавантажувати Web -сторінку, всі програми виконуються в відповідь на будь-яку подію. Наприклад, перед відправленням даних форми можна перевірити їх на допустимі значення і, якщо значення не відповідають очікуваним, заборонити відправлення даних. JavaScript - об'єктно-орієнтована скриптова мова програмування і є діалектом мови ECMAScript. JavaScript зазвичай використовується як вбудована мова для програмного доступу до об'єктів додатків. Найбільш широке застосування знаходить у браузерах як мова сценаріїв для надання інтерактивності веб-сторінкам.
Основні архітектурні риси: динамічна типізація, автоматичне керування пам'яттю, прототипне програмування, функції як об'єкти першого класу.
2.  Функції в JavaScript? Як оголошуються?
Функції є набір інструкцій, які виконують певну дію або обчислюють певне значення.
function Імя_функції([параметри [, ...]]){
    // Інструкції
}
Визначення функції починається з ключового слова function, після якого слідує ім'я функції.
Після імені функції у дужках йде перелік параметрів.
Під час виклику після імені функції в дужках вказується список параметрів. Якщо функція не має параметрів, вказуються порожні дужки.
Анонімні функції
Необов'язково надавати функціям певне ім'я. Можна використовувати анонімні функції:
let message = function(){
    console.log("Hello JavaScript");
}
message();

3.  Поняття НТТР та СSS.
HTTP — протокол передачі даних, що використовується в комп'ютерних мережах. Назва скорочена від HyperText Transfer Protocol, протокол передачі гіпертекстових документів. Основним призначенням протоколу HTTP є передача вебсторінок (текстових файлів з розміткою HTML), хоча за допомогою нього успішно передаються як інші файли, які пов'язані з вебсторінками (зображення та застосунки), так і не пов'язані з ними. HTTP припускає, що клієнтська програма — веббраузер — здатна відображати гіпертекстові вебсторінки та файли інших типів у зручній для користувача формі. Для правильного відображення HTTP дозволяє клієнтові дізнатися мову та кодування символів вебсторінки й/або запитати версію сторінки в потрібних мові/кодуванні, використовуючи позначення зі стандарту MIME.
CSS – ( укр. Каскадні таблиці стилів) — це спеціальна мова стилю сторінок, що використовується для опису їхнього зовнішнього вигляду. Самі ж сторінки написані мовами розмітки даних.
Найчастіше CSS використовують для візуальної презентації сторінок, написаних HTML та XHTML, але формат CSS може застосовуватися до інших видів XML-документів. Специфікації CSS були створені та розвиваються Консорціумом Всесвітньої мережі. CSS має різні рівні та профілі. Наступний рівень CSS створюється на основі попередніх, додаючи нову функціональність або розширюючи вже наявні функції. Один і той самий HTML або XML документ може бути відображений по-різному залежно від використаного CSS.
4.  ІР протокол.
IP – протокол мережевого рівня для передавання датаграм між мережами.
IP-протокол — найпоширеніша реалізація ієрархічної схеми мережевої адресації. Використовуваний в мережі Інтернет, протокол відповідає за адресацію пакетів, але не відповідає за встановлення з'єднань, не є надійним і дозволяє реалізувати тільки негарантовану доставку даних. Термін «протокол без встановлення з'єднань» (англ. connectionless) означає, що протокол для взаємодії не потребує виділеного каналу. Протокол IP вибирає найефективніший шлях з числа доступних на основі рішень прийнятих протоколом маршрутизації. Відсутність надійності і негарантована доставка не означає, що система працює погано або ненадійно, а вказує лиш на те, що протокол IP не докладає ніяких зусиль, щоб перевірити чи був пакет доставлений за призначенням. Ці функції делеговані протоколам транспортного та вищих рівнів. Транспортний рівень також відповідає за збірку пакетів у повідомлення в потрібній послідовності.
5.  ІР протокол Адреса, Класова та без класова системи.
Internet Protocol (IP) - міжмережевий протокол. Відноситься до маршрутизованих протоколів мережного рівня сімейства TCP/IP. Саме IP став тим протоколом, що об'єднав окремі підмережі у всесвітню мережу Інтернет. Невід'ємною частиною протоколу є адресація мережі.
IP-адреса є унікальним 32-бітовим ідентифікатором IP-інтерфейсу в Інтернеті. Часто говорять, що IP-адреса присвоюється вузлу мережі (наприклад, хосту); це вірно у випадку, якщо вузол є хостом з одним IP-інтерфейсом, інакше слід уточнити, про адресу якого саме інтерфейсу даного вузла йдеться. Далі для стислості там, де це не викличе неправильного тлумачення, замість адреси IP-інтерфейсу вузла мережі йдеться про IP-адресу хоста. IP-адреси прийнято записувати розбивкою всієї адреси по октетам, кожен октет записується як десяткового числа, числа поділяються точками. Наприклад, адреса 10100000010100010000010110000011
записується як 10100000.01010001.00000101.10000011 = 160.81.5.131.
IP-адреса хоста складається з номера IP-мережі, який займає старшу область адреси, та номера хоста в цій мережі, який займає молодшу частину. Положення межі мережевої та хостової частин (зазвичай воно характеризується кількістю біт, відведених на номер мережі) може бути різним, визначаючи різні типи IP-адрес, які розглядаються нижче.
У класовій моделі IP-адреса може належати до одного із чотирьох класів мереж. Кожен клас характеризується певним розміром мережевої частини адреси, кратним восьми; таким чином, межа між мережевою та хостовою частинами IP-адреси в класовій моделі завжди проходить по межі октету. Приналежність до того чи іншого класу визначається за старшими бітами адреси.
Клас А. Старший біт адреси дорівнює нулю. Розмір мережної частини дорівнює 8 біт. Таким чином, може існувати всього приблизно 27 мереж класу А, але кожна мережа має адресний простір на 224 хостів. Так як старший біт адреси нульовий, всі IP-адреси цього класу мають значення старшого октету в діапазоні 0 - 127, який є також і номером мережі.
Клас В. Два старших біти адреси дорівнюють 10. Розмір мережної частини дорівнює 16 біт. Таким чином, може існувати всього приблизно 214 мереж класу В, кожна мережа має адресний простір на 216 хостів. Значення старшого октету IP-адреси лежать у діапазоні 128 - 191, при цьому номером мережі є два старші октети.
Клас С. Три старших біта адреси дорівнюють 110. Розмір мережної частини дорівнює 24 бітам. Кількість мереж класу приблизно 221, адресний простір кожної мережі розрахований на 254 хоста. Значення старшого октету IP-адреси лежать у діапазоні 192 - 223, а номером мережі є три старші октети.
Клас D. Мережі зі значеннями старшого октету IP-адреси 224 та вище. Зарезервовані для спеціальних цілей. Деякі адреси використовуються для мультикастингу - передачі дейтаграм групі вузлів мережі, наприклад:
224.0.0.1 - всім хостам цієї мережі;
224.0.0.2 - усім маршрутизаторам цієї мережі;
224.0.0.5 – усім OSPF-маршрутизаторам;
224.0.0.6 - всім виділеним (designated) OSPF-маршрутизаторам;
У разі адресації поза класами, з довільним положенням кордону мережа-хост всередині IP-адреси, до IP-адреси додається 32-бітова маска, яку називають маскою мережі (netmask) або маскою підмережі (subnet mask). Мережева маска конструюється за таким правилом:
на позиціях, що відповідають номеру мережі, біти встановлені;
на позиціях, що відповідають номеру хоста, биті скинуті.
6.  поняття код стану HTTP.
Код стану HTTP — частина першого рядка відповіді сервера при запитах за протоколом HTTP. Він є цілим число з трьох арабських цифр. Перша цифра вказує на клас стану. За кодом відповіді зазвичай йде відділена пробілом пояснювальна фраза англійською мовою, яка пояснює людині причину саме такої відповіді.
По коду відповіді клієнт дізнається про результати його запиту і визначає, що йому робити далі. Набір кодів стану є стандартом і вони описані у відповідних документах RFC
7.  Коди стану: які є? за що відповідають?
1xx Інформаційні: 
100 Continue - Означає, що сервер отримав заголовок запиту, і клієнт повинен надіслати тіло запиту (для тих типів запитів, для яких необхідно відсилати тіло запиту, наприклад, POST запит).
101 Switching Protocols - Говорить про те, що запитуюча сторона попросила сервер здійснити процедуру перемикання протоколів і сервер вислав підтвердження, що він готовий виконати її.
102 Processing - Оскільки запит WebDAV може містити багато під-запитів, пов'язаних з операціями над файлами, і це може зайняти багато часу на виконання запиту.
105 Name Not Resolved - При розпізнаванні доменного імені виникла помилка у зв'язку з невірною або відсутньою IP-адресою DNS-сервера.
2xx Успішні операції
200 OK - Стандартна відповідь про успішне виконання HTTP запиту.
201 Created - Запит був виконаний і в результаті нього був створений новий ресурс.
202 Accepted - Запит був прийнятий для обробки, але обробка не була завершена. 
203 Non-Authoritative Information - Сервер успішно обробив запит, але інформація що міститься у відповіді, може бути з іншого джерела.
204 No Content - Сервер успішно обробив запит, але не повертає вміст. Зазвичай використовується у відповідь на успішний запит видалення.
3xx Перенаправлення
300 Multiple Choices - Вказує кілька варіантів посилань на ресурс, по яких клієнт може слідувати. 
301 Moved Permanently - Цей і всі наступні запити повинні бути спрямовані по вказаному новому URI.
302 Found - Зазвичай використовується для виконання перенаправлення на іншу сторінку і додатково містить в собі URL-посилання на HTTP локацію в полі HTTP заголовка.
303 See Other - Відповідь на запит може бути отримана під іншим URI, з використанням процедури GET. 
304 Not Modified - Вказує на те, що ресурс не був змінений з моменту останнього запиту. 
4xx Клієнтська помилка
400 Bad Request — Неправильний запит. Запит не може бути виконаний з причини невірного синтаксису.
401 Unauthorized — Несанкціонований доступ. 
402 Payment Required — Потрібна оплата. Зарезервовано для майбутнього використання.
403 Forbidden — Заборонено. Запит був коректним, але сервер відмовляється відповідати на нього. На відміну від 401 Unauthorized, не має ніякого значення, чи відбулася аутентифікація.
404 Not Found — Не знайдено. Ресурс не знайдено, але він може бути доступний в майбутньому.
5xx Серверна помилка
500 Internal Server Error - Будь-яка внутрішня помилка сервера, що не входить в рамки класу
501 Not Implemented - Сервер або не розпізнає метод запиту, або в нього немає можливості його виконати.
502 Bad Gateway - Сервер, працюючи як шлюз або проксі-сервер, отримав відповідь про помилку чи відсутність зв'язку при спробі доступитися до наступного сервера в ланцюжку запитів.
503 Service Unavailable - Сервер тимчасово не має можливості обробляти запити за технічними причинами (обслуговування, перевантаження тощо).
504 Gateway Timeout - Сервер, працюючи як шлюз або проксі-сервер, не дочекався відповіді від вищеcтоящого серверу для завершення поточного запиту. 
8.   Асинхроність в JavaScript.
Для асинхронного виконання коду у JavaScript можна застосовувати: таймери, Promise, async & await.
У JavaScript таймер додає код в чергу виконання коду з заданою затримкою. Тому якщо основний код JavaScript досить навантажує виконання, тобто черга виконання велика то таймер може виконатися з невеликою похибкою часу. setTimeout( function(){alert('минуло 3 секунди');} ,3000)
Для асинхронного виконання коду в JavaScript було створено Promise.
function loadImg(url){ //функція завантаження зображення яка повертає проміс
  return new Promise(function(resolve, reject){
    var img=document.createElement('img');
    img.onload=function(){resolve(img)};
    img.onerror=function(er){reject(er)};
    img.src=url;
  });
}

  var url1='/dani/test.jpg', url2='/dani/test.png', url3='/_images/js.png';

  // завантажуємо зображення ланцюжком промісів
  loadImg(url1)
  .then(function(img1){ alert(img1); return loadImg(url2); })
  .then(function(img2){ alert(img2); return loadImg(url3); })
  .then(function(img3){ alert(img3); })
  .catch(function(e){console.log('Помилка завантаження зображення: ',e);});
async & await дозволяє писати асинхронні функції.
function loadImg(url){ //функція завантаження зображення яка повертає проміс
  return new Promise(function(resolve, reject){
    var img=document.createElement('img');
    img.onload=function(){resolve(img)};
    img.onerror=function(er){reject(er)};
    img.src=url;});
}

async function lo(){
  var res=[];
  var img1 = await loadImg('/dani/test.jpg');
  var img2 = await loadImg('/dani/test.png');
  var img3 = await loadImg('/_images/js.png');
  return [img1, img2, img3];}

lo().then(function(res){ alert(res); });
9.  Об’єкт XMLHttpRequest.
XMLHttpRequest - це стандартний об'єкт JavaScript для роботи з технологією AJAX.
xhr = new XMLHttpRequest();
XMLHttpRequest (XHR)- об'єкт для відправки і отримання даних з сервера без перезавантаження веб-сторінки.
Об'єкт XMLHttpRequest підтримують усі браузери але створення об'єкту у старих версіях до Internet Explorer 7 є іншим. Дані браузери є застарілими, тому рекомендовано використовувати стандартний спосіб створення об'єкту new XMLHttpRequest(). 
Об'єкт XMLHttpRequest може працювати двома способами: синхроно і асинхроно. Спосіб задається методом XMLHttpRequest.open().
При синхроному способі створюється об'єкт XMLHttpRequest, ініцалізується за допомогою методу open() і відправляється за допомогою send(). Скрипт в цю мить "завмирає" і чекає відповіді від сервера. Коли отримано відповідь від сервера скрипт (код) виконується далі.
var xhr = new XMLHttpRequest();
xhr.open("get", "", false);
xhr.send(null);
if(xhr.status==200) alert(xhr.responseText);
При асинхроному способі створюється об'єкт XMLHttpRequest, ініцалізується за допомогою методу open() і відправляється за допомогою send(). Браузер при цьому не чекає відповіді від сервера, а скрипт (код) виконується дальше. Коли отримано відповідь від сервера виникає подія (ї) об'єкта XMLHttpRequest такі як onload, onreadystatechange.
var xhr = new XMLHttpRequest();
xhr.open("get", "", true);
xhr.onreadystatechange = function(){
if(xhr.readyState==4 && xhr.status==200) alert(xhr.responseText);
}
xhr.send(null);
10.  JSON.
JSON (JavaScript Object Notation) представляє легкий формат зберігання даних. JSON описує структуру та організацію даних JavaScript. Простота JSON призвела до того, що зараз він є найпопулярнішим форматом передачі даних у середовищі web, витіснивши інший колись популярний формат xml. Об'єкти JSON дуже схожі на об'єкти JavaScript, тим більше, що JSON є підмножиною JavaScript. У той самий час важливо їх розрізняти: JavaScript є мовою програмування, а JSON форматом даних. JSON підтримує три типи даних: примітивні значення, об'єкти та масиви. Примітивні значення являють собою стандартні рядки, числа, значення null, логічні значення true і false. Об'єкти представляють набір найпростіших даних, інших об'єктів та масивів. Наприклад, типовий об'єкт JSON:
{
    "name": "Tom",
    "married": true,
    "age": 30
}
У javascript цьому об'єкту відповідав би наступний:
var user = {
    name: "Tom",
    married: true,
    age: 30
}
об'єкти JSON не можуть зберігати функції, змінні, як об'єкти JavaScript.
